""" 
Git Crash Cource
- To see the cha`nges in an already tracked file(index.html) currently contains
    > git diff index.html
- To add lines of code to the next commit , it's know as patch level
    > git add -p index.html
- Undo a merge/rebase especially in cases of merge conflicts
    > git merge --abort 
    > git rebase --abort

    

Python BUILTINS are everything inside the builtin module - 
1. LEGB Rule - Defines the order of scopes in python
    - Local Scope 
        > comes with the current func or class you are in 
    
    - Enclosing/Nonlocal scope 
        > a func/class enclosed by another , you can use the variable of the
        outer scope by calling "nonlocal" - to reference that of the enclosing scope 

    - Global Scope 
        > Every module has a predefined globals such as __name__ (to shw the name), __doc__(to shw the docstring)

    - Builtin scope 
        > This is where all python top level func are defined (len(), print(), range())
        > You can access builtins by just importing it or by __builtins__ 
        > To see a varaibles defined within the builtins or any class/func , use dir() func
        > Builtins contains all the type of Exceptions/Errors classes(66 total), Data types, func, methods, 
        > -Ellipsis -None -True -False -NotImplemented : 5 Constants 
            - Ellipsis(...) -for type annotations and fancy slicy support 
            - NotImplemented - used inside a class to show a certain operator isn't defined for the class 
        > Funky globals
            These are actually not unique to the builtins module but are present in the global scope of every module
            There are attributes and holds informations about the module. 
            - __spec__, __loader__, __debug__ etc
        - __name__: shows the name 
        - __doc__: shows the docstrings of func/modules 
        - help() : read up on the module 
        - __package__: To see which package the module belongs to. 
        - __spec__: To see metadata, other infos. The kind of module, it's name, it's origin and how it was loaded(refrenced).
        - __frozen modules are frozen by python because they bootstrap it's installation.
        - __import__ is the builtin func that defines how import statements work in python

        - __debug__: Not a module variable but are present globally, always set to True, It's what defines the type of errror to debug.
            Python always runs in debug mood by default. 
            Python can also run in optimized mood by passing -0. This won't show any error.
            True, False, None and __debug__ are the only 4 CONSTANTS you can not override 
        - __build_class__ :  Not a module variable but are present globally, allow class definitions to accepts arbitrary positional and keyword
                            arguments
        - __cached__ : This stores the path of the imported module.

    All python code is compiled to bytecode and not machine code . 
    - Your source code is parsed to a syntax tree. This is how python understands it. It finds and report any errors found in it 
    - It compile the syntax tree into bytecode(micro-instrutions for py virtual machine, where python logic resides )
    - On import, .pyc file is where python stores the bytecode in a __pycache__ folder to redce the time needed to 
        compile to bytecode.
        > The __cached__ parameter of the imported module points to this .pyc files.
    - exec() takes a string and runs it as a py code 'execute'. Note: it can also take in a CODE OBJECTS(bytecode)
        i.e the exact instrutions generated from py codes and the variables and constants used. Code objects are generated by ASTs
        (Abstact Syntax Trees) by a parser that runs on a string of code
    - eval() : Similar to exec, it takes a string, expressions but return a value, 
    - lambda func is an anonymous func. carry out a task on duty . A short cut for making a func and passing it to another
      func, it evaluate a single python expression and return its result
    - min() , max(), sorted([list of values], key=func(value))
        



















"""
